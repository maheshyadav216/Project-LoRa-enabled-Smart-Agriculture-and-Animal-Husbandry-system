/* 
  Sketch generated by the Arduino IoT Cloud Thing "Wio-E5-LoRa-Gateway-Node"
  https://create.arduino.cc/cloud/things/ 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float cattleshed_Humidity;
  float cattleshed_Temperature;
  float greenhouse_Humidity;
  float greenhouse_Temperature;
  int cattleshed_Light;
  int greenhouse_CO2eq;
  int greenhouse_Light;
  int greenhouse_SoilMoisture;
  int greenhouse_TVOC;
  bool cattleshed_Bulbs;
  bool cattleshed_Cooler;
  bool cattleshed_ExFan;
  bool cattleshed_Heater;
  bool greenhouse_ExFan;
  bool greenhouse_Pump;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
//==============================================================================================//
// Project - LoRa Enabled Smart Agriculture and Animal Husbadry System for remote rural areas.
// Author - (Hackster ID - maheshyadav216 ) : https://www.hackster.io/maheshyadav2162
// Contest - IoT into the Wild contest for sustainable Planet 2022
// Organizers - hackster.io and SEEED Studio
// GitHub Repo of Projet - https://github.com/maheshyadav216/Project-LoRa-enabled-Smart-Agriculture-and-Animal-Husbandry-system
// Code last Modified on - 27/09/2022
//===============================================================================================//

// This is LoRa receiver/Gateway Node code, which receives LoRa data packets sent from remote Agriculture Field. Then upload that 
// data parameters to Arduino IoT cloud.

#include "thingProperties.h"

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Initialize LoRa serial2 and wait for port to open:
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  delay(5000);

  // Initilize display module
  init_display();

  // Initilize Wio E5 LoRa module
  setup_LoRa_receiver();

  delay(2500);

}


// Function to Parse the Received Data
static int recv_parse(void)
{
    char ch;
    int index = 0;
    memset(recv_buf, 0, sizeof(recv_buf));
    while (Serial2.available() > 0)
    {
        ch = Serial2.read();
        recv_buf[index++] = ch;
        Serial.print((char)ch);
        delay(2);
    }
 
    if (index)
    {
        char *p_start = NULL;
        char data[128] = {
            0,
        };
        int rss = 0;
        int snr = 0;
 
        p_start = strstr(recv_buf, "+TEST: RX \"6D793231362C");
        if (p_start)
        {
            p_start = strstr(recv_buf, "6D793231362C");
            if (p_start && (1 == sscanf(p_start, "6D793231362C%s", data)))
            {
                data[70] = 0;
                display.clearDisplay();
                display.setCursor(10, 3);
                display.println("LoRa Gateway Node");
                display.drawLine(0, 15, 127, 15, WHITE);
                display.setCursor(15, 22);
                display.println("LoRa Signal : OK");
                //Serial.println(data);
                char output[128];
                char* text = unHex(data,output, sizeof(output));
                //Serial.println(text);
                greenhouse_Temperature = (getValue(text, ',', 0)).toFloat();
                greenhouse_Humidity = (getValue(text, ',', 1)).toFloat();
                greenhouse_SoilMoisture = (getValue(text, ',', 2)).toInt();
                greenhouse_Light = (getValue(text, ',', 3)).toInt();
                greenhouse_CO2eq = (getValue(text, ',', 4)).toInt();
                greenhouse_TVOC = (getValue(text, ',', 5)).toInt();
                greenhouse_Pump = (getValue(text, ',', 6)).toInt();
                greenhouse_ExFan = (getValue(text, ',', 7)).toInt();

                cattleshed_Temperature = (getValue(text, ',', 0)).toFloat();
                cattleshed_Humidity = (getValue(text, ',', 1)).toFloat();
                cattleshed_Light = (getValue(text, ',', 8)).toInt();
                cattleshed_ExFan = (getValue(text, ',', 9)).toInt();
                cattleshed_Heater = (getValue(text, ',', 10)).toInt();
                cattleshed_Cooler = (getValue(text, ',', 11)).toInt();
                cattleshed_Bulbs = (getValue(text, ',', 12)).toInt();
                Serial.println("\r\n");
            }
 
            p_start = strstr(recv_buf, "RSSI:");
            if (p_start && (1 == sscanf(p_start, "RSSI:%d,", &rss)))
            {
                display.setCursor(15, 38);
                display.println("RSSI : ");
                display.setCursor(60, 38);
                display.println(rss);
                display.setCursor(100, 38);
                display.println("dBm");
            }
            p_start = strstr(recv_buf, "SNR:");
            if (p_start && (1 == sscanf(p_start, "SNR:%d", &snr)))
            {
                display.setCursor(15, 54);
                display.println("SNR  : ");
                display.setCursor(65, 54);
                display.println(snr);
                display.setCursor(100, 54);
                display.println("dB");
                display.display();
            }
            return 1;
        }
    }
    return 0;
}

// Function for preparing Wio E5 Mini to receive LoRa Packets
static int node_recv(uint32_t timeout_ms)
{
    at_send_check_response("+TEST: RXLRPKT", 1000, "AT+TEST=RXLRPKT\r\n");
    int startMillis = millis();
    do
    {
        if (recv_parse())
        {
            return 1;
        }
    } while (millis() - startMillis < timeout_ms);
    return 0;
}


void loop() {
    unsigned long currentUpdateTime = millis();
    if (currentUpdateTime - previousUpdateTime >= updateInterval) {
        ArduinoCloud.update();
        previousUpdateTime = currentUpdateTime;
    }

    // Your code here 
    if (is_exist) {
        node_recv(5000);
    } 
}
